[gd_scene load_steps=7 format=3 uid="uid://dcoqat0sa0qs6"]

[ext_resource type="Script" uid="uid://fiwjy1240khj" path="res://pixelated_rope/pixel_rope.gd" id="1_g73lh"]
[ext_resource type="Texture2D" uid="uid://bl2obv6ieug3o" path="res://assets/start_anchor_texture.png" id="2_mdnkb"]
[ext_resource type="Texture2D" uid="uid://d4hedfhby0cvt" path="res://assets/end_anchor_texture.png" id="3_7j1s1"]

[sub_resource type="Shader" id="Shader_7jsn6"]
code = "shader_type canvas_item;

// Pixelation properties
uniform float pixel_size : hint_range(1.0, 20.0) = 3.0;
uniform vec4 outline_color : source_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform bool enable_outline = true;

void fragment() {
    // Get the original color at this position
    vec4 original = texture(TEXTURE, UV);
    
    // If this pixel is transparent, keep it transparent
    if (original.a < 0.01) {
        COLOR = vec4(0.0, 0.0, 0.0, 0.0);
    } else {
        // Calculate the nearest pixel grid position
        vec2 grid_uv = floor(UV * 100.0 / pixel_size) * pixel_size / 100.0;
        
        // Sample the color at the grid position
        vec4 pixelated = texture(TEXTURE, grid_uv);
        
        // Keep original alpha if the pixelated sample lost it
        pixelated.a = max(pixelated.a, original.a);
        
        if (enable_outline) {
            // Check if any adjacent pixel is transparent
            bool is_edge = false;
            float step_size = pixel_size / 100.0;
            
            // Check 4 neighbors
            vec4 n1 = texture(TEXTURE, vec2(UV.x + step_size, UV.y));
            vec4 n2 = texture(TEXTURE, vec2(UV.x - step_size, UV.y));
            vec4 n3 = texture(TEXTURE, vec2(UV.x, UV.y + step_size));
            vec4 n4 = texture(TEXTURE, vec2(UV.x, UV.y - step_size));
            
            // If any neighbor is transparent, this is an edge
            if ((n1.a < 0.1 || n2.a < 0.1 || n3.a < 0.1 || n4.a < 0.1) && original.a > 0.1) {
                is_edge = true;
            }
            
            // Apply outline or pixelated color
            COLOR = is_edge ? outline_color : original;
        } else {
            // Just use the original color if no outline
            COLOR = original;
        }
    }
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8pydw"]
shader = SubResource("Shader_7jsn6")
shader_parameter/pixel_size = 3.0
shader_parameter/outline_color = Color(0, 0, 0, 1)
shader_parameter/enable_outline = true

[sub_resource type="CircleShape2D" id="CircleShape2D_mdnkb"]
radius = 6.08276

[node name="PixelRope" type="Node2D"]
material = SubResource("ShaderMaterial_8pydw")
script = ExtResource("1_g73lh")

[node name="StartAnchor" type="Area2D" parent="."]

[node name="StartAnchorTexture" type="Sprite2D" parent="StartAnchor"]
texture = ExtResource("2_mdnkb")

[node name="CollisionShape2D" type="CollisionShape2D" parent="StartAnchor"]
shape = SubResource("CircleShape2D_mdnkb")

[node name="EndAnchor" type="Area2D" parent="."]

[node name="EndAnchorTexture" type="Sprite2D" parent="EndAnchor"]
scale = Vector2(0.996377, 1)
texture = ExtResource("3_7j1s1")

[node name="CollisionShape2D" type="CollisionShape2D" parent="EndAnchor"]
shape = SubResource("CircleShape2D_mdnkb")
